#!/bin/sh
# Startup script for the ORS Server
# chkconfig: - 85 15
# pidfile: /var/run/ors/ors.pid
# main config: /etc/marketcetera/ors.conf

CONFIG="/etc/marketcetera/ors.conf"
[ -r $CONFIG ] && . $CONFIG

PIDFILE=$RUN_DIR/ors.pid

function isrunning() {
  if [ -f $PIDFILE ]; then
    local pid=$(cat $PIDFILE 2> /dev/null)
    uid=$(id -u)
    if `ps --pid $pid -u $uid 2>&1 | grep $pid > /dev/null 2>&1`; then
      return 0
    fi
  fi
  return 1
}

# Kill the process given by $1 and its children
killtree() {
  local _pid=$1
  for _child in $(ps -o pid --no-headers --ppid ${_pid}); do
    killtree ${_child}
  done

  local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
  if [ -z "$should_be_gone_pid" ]; then
    return
  else
    kill -TERM ${_pid}
  fi

  local count=0
  while [ ${count} -lt 15 ]; do
    local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
    if [ -z "$should_be_gone_pid" ]; then
      return
    else
      sleep 2
      let count=${count}+1
    fi
  done

  local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
  if [ ! -z $should_be_gone_pid ]; then
    kill -9 ${_pid}
  fi
}

function start() {
  echo "Starting ORS"
  if ! isrunning; then
    mkdir -p $RUN_DIR
    /usr/bin/ors >/dev/null 2>&1 &
    local pid=$!
    echo $pid > $PIDFILE
    echo "Started ORS"
  else
    echo "ORS already running" 1>&2
  fi
}

function stop() {
  echo "Stopping ORS"

  if isrunning; then
    if [ -f "$PIDFILE" ]; then
      pid=$(cat $PIDFILE);
      killtree $pid
      echo "Stopped ORS"  
    else
      echo "Failed to locate ORS PID File" 1>&2
    fi
  else
    echo "ORS was already stopped"
  fi
}

function restart() {
  stop
  start
}

function status() {
  if isrunning; then
    echo "ORS is running"
  else
    echo "ORS is not running"
  fi
}

function usage() {
   echo "Usage: $0 {start|stop|restart|status}"
}

# See how we were called.
case "$1" in
  start) start ;;
  stop) stop ;;
  restart) restart ;;
  status) status ;;
  *) usage ;;
esac
